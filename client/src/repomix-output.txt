This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-31T18:52:50.865Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
component/
  Comment.jsx
  CreateTopic.jsx
  Home.jsx
  Login.jsx
  Navbar.jsx
  Post.jsx
  PostDetail.jsx
  Signup.jsx
  Topic.jsx
  TopicPage.jsx
  User.jsx
service/
  apiClient.js
  authService.js
App.jsx
index.css
main.jsx

================================================================
Files
================================================================

================
File: component/Comment.jsx
================
import React, { useEffect, useState } from 'react';
import api from '../service/apiClient';

const Comments = ({ postId }) => {
  const [comments, setComments] = useState([]);
  const [content, setContent] = useState('');

  const fetchComments = async () => {
    try {
      const response = await api.get(`/comments/post/${postId}`);
      setComments(response.data);
    } catch (err) {
      alert('Failed to fetch comments');
    }
  };

  const addComment = async () => {
    try {
      await api.post('/comments', { content, postId });
      setContent('');
      fetchComments();
    } catch (err) {
      alert('Failed to add comment');
    }
  };

  useEffect(() => {
    fetchComments();
  }, [postId]);

  return (
    <div>
      <h2>Comments</h2>
      <ul>
        {comments.map(comment => (
          <li key={comment.id}>
            {comment.content} - <small>{comment.authorName}</small>
          </li>
        ))}
      </ul>
      <textarea
        placeholder="Add a comment"
        value={content}
        onChange={(e) => setContent(e.target.value)}
      />
      <button onClick={addComment}>Comment</button>
    </div>
  );
};

export default Comments;

================
File: component/CreateTopic.jsx
================
import React, { useState } from 'react';
import api from '../service/apiClient';

const CreateTopic = () => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');

  const createTopic = async () => {
    try {
      await api.post('/topics', { name, description });
      alert('Topic created successfully!');
      setName('');
      setDescription('');
    } catch (err) {
      alert('Failed to create topic');
    }
  };

  return (
    <div>
      <h2>Create Topic</h2>
      <input
        type="text"
        placeholder="Topic Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <textarea
        placeholder="Description"
        value={description}
        onChange={(e) => setDescription(e.target.value)}
      />
      <button onClick={createTopic}>Create</button>
    </div>
  );
};

export default CreateTopic;

================
File: component/Home.jsx
================
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../service/apiClient';
import { ChevronRight, Plus } from 'lucide-react';

const Home = () => {
  const [topics, setTopics] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [newTopicName, setNewTopicName] = useState('');
  const [newTopicDescription, setNewTopicDescription] = useState('');
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const fetchTopics = async () => {
    try {
      const response = await api.get('/topics'); 
      setTopics(response.data.content);
    } catch (err) {
      console.error(err);
      alert('Failed to fetch topics');
    }
  };

  const createTopic = async () => {
    try {
      await api.post('/topics', { name: newTopicName, description: newTopicDescription });
      alert('Topic created successfully!');
      setShowForm(false);
      setNewTopicName('');
      setNewTopicDescription('');
      fetchTopics(); 
    } catch (err) {
      console.error(err);
      alert('Failed to create topic');
    }
  };

  useEffect(() => {
    fetchTopics();
  }, []);

  return (
    <div className="max-w-4xl mx-auto px-4 py-8 space-y-8">
      <div className="flex justify-end space-x-4">
        <button 
          onClick={() => navigate('/login')} 
          className="bg-dark-200 text-dark-400 px-6 py-3 rounded-lg hover:bg-dark-300 transition-colors"
        >
          Login
        </button>
        <button 
          onClick={() => navigate('/signup')} 
          className="bg-dark-300 text-dark-50 px-6 py-3 rounded-lg hover:opacity-90 transition-opacity"
        >
          Signup
        </button>
      </div>

      <div className="bg-dark-100 rounded-xl p-6 shadow-2xl">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold text-dark-400">Community Topics</h2>
          {token && (
            <button 
              onClick={() => setShowForm(!showForm)} 
              className="bg-dark-300 text-dark-50 p-2 rounded-full hover:opacity-90 transition-opacity"
            >
              <Plus />
            </button>
          )}
        </div>

        <ul className="space-y-3">
          {topics.map((topic) => (
            <li 
              key={topic.id} 
              className="group flex items-center justify-between bg-dark-200 hover:bg-dark-300/20 transition-all duration-300 rounded-lg p-4"
            >
              <div>
                <h3 className="text-lg font-semibold text-dark-400 group-hover:text-dark-300 transition-colors">
                  {topic.name}
                </h3>
                <p className="text-gray-400 text-sm">{topic.description || 'No description'}</p>
              </div>
              <button 
                onClick={() => navigate(`/topics/${topic.id}`)}
                className="text-dark-300 hover:bg-dark-300/20 p-2 rounded-full transition-all"
              >
                <ChevronRight className="group-hover:translate-x-1 transition-transform" />
              </button>
            </li>
          ))}
        </ul>
      </div>

      {token && showForm && (
        <div className="bg-dark-200 rounded-xl p-6 space-y-4">
          <h3 className="text-xl font-semibold text-dark-400">Create New Topic</h3>
          <input
            type="text"
            placeholder="Topic Name"
            value={newTopicName}
            onChange={(e) => setNewTopicName(e.target.value)}
            className="w-full bg-dark-100 text-dark-400 px-4 py-2 rounded-lg border border-dark-300/30 focus:ring-2 focus:ring-dark-300 transition-all"
          />
          <textarea
            placeholder="Topic Description"
            value={newTopicDescription}
            onChange={(e) => setNewTopicDescription(e.target.value)}
            className="w-full bg-dark-100 text-dark-400 px-4 py-2 rounded-lg border border-dark-300/30 focus:ring-2 focus:ring-dark-300 transition-all h-24"
          />
          <div className="flex space-x-4">
            <button 
              onClick={createTopic} 
              className="bg-dark-300 text-dark-50 px-6 py-2 rounded-lg hover:opacity-90 transition-opacity"
            >
              Create
            </button>
            <button 
              onClick={() => setShowForm(false)} 
              className="bg-dark-200 text-dark-400 px-6 py-2 rounded-lg hover:bg-dark-300/20 transition-colors"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Home;

================
File: component/Login.jsx
================
import React, { useState } from 'react';
import api from '../service/apiClient';
import { useNavigate } from 'react-router-dom';
import { LogIn } from 'lucide-react';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate(); 

  const handleLogin = async () => {
    try {
      console.log('Attempting login with:', { email });
      
      const response = await api.post('/auth/login', { email, password });
      console.log('Login response:', response.data);
      
      if (response.data.token) {
        localStorage.setItem('token', response.data.token);
        console.log('Token stored:', response.data.token);
        
        navigate('/');
      } else {
        console.error('No token received in response');
        alert('Login failed: No token received');
      }
    } catch (err) {
      console.error('Login error:', err);
      
      if (err.response) {
        console.error('Error response:', err.response.data);
        console.error('Error status:', err.response.status);
        alert(`Login failed: ${err.response.data.message || 'Unknown error'}`);
      } else if (err.request) {
        console.error('No response received:', err.request);
        alert('Login failed: No response from server');
      } else {
        console.error('Error setting up request:', err.message);
        alert(`Login failed: ${err.message}`);
      }
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-dark-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8 bg-dark-100 p-8 rounded-xl shadow-2xl">
        <div className="text-center">
          <h2 className="mt-6 text-3xl font-bold text-dark-400">
            Welcome Back
          </h2>
          <p className="mt-2 text-sm text-dark-300">
            Sign in to continue to your dashboard
          </p>
        </div>
        <div className="space-y-6">
          <div className="space-y-4">
            <input
              type="email"
              placeholder="Email Address"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="dark-input w-full"
              required
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="dark-input w-full"
              required
            />
          </div>
          <div>
            <button
              onClick={handleLogin}
              className="dark-btn dark-btn-primary w-full flex items-center justify-center space-x-2"
            >
              <LogIn size={20} />
              <span>Sign In</span>
            </button>
          </div>
          <div className="text-center">
            <span className="text-dark-300">
              Don't have an account? 
              <button 
                onClick={() => navigate('/signup')}
                className="ml-2 text-dark-300 hover:text-dark-50 transition-colors"
              >
                Sign Up
              </button>
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;

================
File: component/Navbar.jsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Moon, Sun } from 'lucide-react';

const Navbar = ({ darkMode, toggleDarkMode }) => {
  const navigate = useNavigate();
  const token = localStorage.getItem('token');
   
  const handleLogout = () => {
    localStorage.removeItem('token');
    alert('You have been logged out.');
    navigate('/login');
  };

  return (
    <nav className="fixed top-0 left-0 w-full bg-gray-800 dark:bg-gray-900 shadow-md z-50">
      <div className="container mx-auto flex justify-between items-center h-16 px-4">
        <div className="flex items-center space-x-4">
          <button 
            onClick={() => navigate('/')} 
            className="text-gray-100 hover:bg-gray-700 px-3 py-2 rounded-md transition-colors"
          >
            Home
          </button>
          
          {/* Dark Mode Toggle */}
          <button 
            onClick={toggleDarkMode}
            className="text-gray-100 hover:bg-gray-700 p-2 rounded-full transition-colors"
          >
            {darkMode ? <Sun size={20} /> : <Moon size={20} />}
          </button>
        </div>
        
        <div className="flex items-center space-x-4">
          {token ? (
            <button 
              onClick={handleLogout} 
              className="text-white bg-red-600 hover:bg-red-700 px-3 py-2 rounded-md transition-colors"
            >
              Logout
            </button>
          ) : (
            <>
              <button 
                onClick={() => navigate('/login')} 
                className="text-gray-100 hover:bg-gray-700 px-3 py-2 rounded-md transition-colors"
              >
                Login
              </button>
              <button 
                onClick={() => navigate('/signup')} 
                className="dark-btn dark-btn-primary"
              >
                Sign Up
              </button>
            </>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

================
File: component/Post.jsx
================
import React, { useEffect, useState } from 'react';
import api from '../service/apiClient';

const Posts = () => {
  const [posts, setPosts] = useState([]);
  const [comments, setComments] = useState({}); 

  
  const fetchPosts = async () => {
    try {
      const response = await api.get('/posts'); 
      setPosts(response.data);

      
      const commentsData = {};
      for (const post of response.data) {
        const response = await api.get(`/comments/post/${post.id}`); 
        commentsData[post.id] = response.data;
      }
      setComments(commentsData);
    } catch (err) {
      console.error(err);
      alert('Failed to fetch posts or comments');
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  return (
    <div>
      <h2>Posts</h2>
      {posts.map((post) => (
        <div key={post.id} style={{ marginBottom: '2rem', border: '1px solid #ddd', padding: '1rem' }}>
          <h3>{post.title}</h3>
          <p>{post.content}</p>
          <strong>Comments:</strong>
          <ul>
            {comments[post.id]?.length > 0 ? (
              comments[post.id].map((comment) => (
                <li key={comment.id}>
                  {comment.content} - <small>by {comment.authorName}</small>
                </li>
              ))
            ) : (
              <li>No comments yet</li>
            )}
          </ul>
        </div>
      ))}
    </div>
  );
};

export default Posts;

================
File: component/PostDetail.jsx
================
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import api from '../service/apiClient';
import { MessageSquare, Send } from 'lucide-react';

const PostDetails = () => {
  const { postId } = useParams();
  const [post, setPost] = useState(null);
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const fetchPostDetails = async () => {
    try {
      const postResponse = await api.get(`/posts/${postId}`);
      const commentsResponse = await api.get(`/comments/post/${postId}`);
      setPost(postResponse.data);
      setComments(commentsResponse.data);
    } catch (err) {
      alert('Failed to fetch post or comments');
    }
  };

  const addComment = async () => {
    try {
      await api.post('/comments', { content: newComment, postId });
      setNewComment('');
      fetchPostDetails();
    } catch (err) {
      alert('Failed to add comment');
    }
  };

  useEffect(() => {
    fetchPostDetails();
  }, [postId]);

  if (!post) return <p className="text-dark-300">Loading...</p>;

  return (
    <div className="max-w-2xl mx-auto bg-dark-50 p-6 space-y-6">
      <div className="bg-dark-100 rounded-xl p-6 shadow-lg">
        <h2 className="text-2xl font-bold text-dark-400 mb-4">{post.title}</h2>
        <p className="text-dark-300 mb-4">{post.content}</p>
      </div>

      <div className="bg-dark-100 rounded-xl p-6 shadow-lg space-y-4">
        <div className="flex items-center space-x-2 mb-4">
          <MessageSquare className="text-dark-300" />
          <h3 className="text-xl font-semibold text-dark-400">Comments</h3>
        </div>

        {comments.map((comment) => (
          <div key={comment.id} className="bg-dark-200 p-4 rounded-lg border border-dark-300/20">
            <p className="text-dark-300">{comment.content}</p>
            <small className="text-dark-300 italic">- {comment.authorName}</small>
          </div>
        ))}

        {token ? (
          <div className="mt-4 flex space-x-4">
            <textarea
              placeholder="Write a comment..."
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
              className="w-full bg-dark-200 text-dark-400 px-4 py-2 rounded-lg border border-dark-300/30 focus:ring-2 focus:ring-dark-300 transition-all h-24"
            />
            <button 
              onClick={addComment} 
              className="dark-btn dark-btn-primary flex items-center space-x-2"
              disabled={!newComment.trim()}
            >
              <Send size={20} />
              <span>Send</span>
            </button>
          </div>
        ) : (
          <div className="text-center">
            <button 
              onClick={() => navigate('/login')}
              className="dark-btn dark-btn-secondary"
            >
              Login to Comment
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default PostDetails;

================
File: component/Signup.jsx
================
import React, { useState } from 'react';
import api from '../service/apiClient';
import { useNavigate } from 'react-router-dom';
import { UserPlus } from 'lucide-react';

const Signup = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const navigate = useNavigate();

  const handleSignup = async () => {
    try {
      const response = await api.post('/auth/signup', {
        email: email,
        password: password,
        name: name
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      alert('Signup successful! Please log in.');
      navigate('/login');
    } catch (err) {
      alert(`Signup failed: ${err.response?.data?.message || 'Unknown error occurred'}`);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-dark-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8 bg-dark-100 p-8 rounded-xl shadow-2xl">
        <div className="text-center">
          <h2 className="mt-6 text-3xl font-bold text-dark-400">
            Create Your Account
          </h2>
          <p className="mt-2 text-sm text-dark-300">
            Start your journey with us today
          </p>
        </div>
        <div className="space-y-6">
          <div className="space-y-4">
            <input
              type="text"
              placeholder="Full Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="dark-input w-full"
              required
            />
            <input
              type="email"
              placeholder="Email Address"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="dark-input w-full"
              required
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="dark-input w-full"
              required
            />
          </div>
          <div>
            <button
              onClick={handleSignup}
              className="dark-btn dark-btn-primary w-full flex items-center justify-center space-x-2"
            >
              <UserPlus size={20} />
              <span>Sign Up</span>
            </button>
          </div>
          <div className="text-center">
            <span className="text-dark-300">
              Already have an account? 
              <button 
                onClick={() => navigate('/login')}
                className="ml-2 text-dark-300 hover:text-dark-50 transition-colors"
              >
                Log In
              </button>
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Signup;

================
File: component/Topic.jsx
================
import React, { useEffect, useState } from 'react';
import api from '../service/apiClient';

const Topics = () => {
  const [topics, setTopics] = useState([]);

  const fetchTopics = async () => {
    try {
      const response = await api.get('/topics');
      setTopics(response.data.content); 
    } catch (err) {
      alert('Failed to fetch topics');
    }
  };

  const deleteTopic = async (topicId) => {
    try {
      await api.delete(`/topics/${topicId}`);
      alert('Topic deleted successfully');
      setTopics(topics.filter(topic => topic.id !== topicId));
    } catch (err) {
      alert('Failed to delete topic');
    }
  };

  useEffect(() => {
    fetchTopics();
  }, []);

  return (
    <div>
      <h2>Topics</h2>
      <ul>
        {topics.map(topic => (
          <li key={topic.id}>
            <strong>{topic.name}</strong> - {topic.description}
            <button onClick={() => deleteTopic(topic.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Topics;

================
File: component/TopicPage.jsx
================
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import api from '../service/apiClient';
import { FileText, Plus } from 'lucide-react';

const TopicPage = () => {
  const { topicId } = useParams();
  const [posts, setPosts] = useState([]);
  const [topicName, setTopicName] = useState('');
  const [showForm, setShowForm] = useState(false);
  const [newPostTitle, setNewPostTitle] = useState('');
  const [newPostContent, setNewPostContent] = useState('');
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const fetchPosts = async () => {
    try {
      const topicResponse = await api.get(`/topics/${topicId}`);
      setTopicName(topicResponse.data.name);

      const postsResponse = await api.get(`/topics/${topicId}/posts`);
      setPosts(postsResponse.data.content);
    } catch (err) {
      alert('Failed to fetch posts');
    }
  };

  const createPost = async () => {
    try {
      await api.post('/posts', {
        title: newPostTitle,
        content: newPostContent,
        topicName: topicName  
      });
      alert('Post created successfully!');
      setShowForm(false);
      fetchPosts();
    } catch (err) {
      alert('Failed to create post');
    }
  };

  useEffect(() => {
    fetchPosts();
  }, [topicId]);

  return (
    <div className="max-w-2xl mx-auto bg-dark-50 p-6 space-y-6">
      <div className="bg-dark-100 rounded-xl p-6 shadow-lg">
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center space-x-2">
            <FileText className="text-dark-300" />
            <h2 className="text-2xl font-bold text-dark-400">{topicName} Posts</h2>
          </div>
          {token && (
            <button 
              onClick={() => setShowForm(!showForm)} 
              className="dark-btn dark-btn-primary flex items-center space-x-2"
            >
              <Plus size={20} />
              <span>New Post</span>
            </button>
          )}
        </div>

        <ul className="space-y-3">
          {posts.map((post) => (
            <li 
              key={post.id} 
              className="bg-dark-200 rounded-lg hover:bg-dark-300/20 transition-colors"
            >
              <button 
                onClick={() => navigate(`/posts/${post.id}`)}
                className="w-full text-left p-4 flex justify-between items-center"
              >
                <span className="text-dark-400 font-medium">{post.title || 'Untitled Post'}</span>
              </button>
            </li>
          ))}
        </ul>
      </div>

      {token && showForm && (
        <div className="bg-dark-100 rounded-xl p-6 shadow-lg space-y-4">
        <h3 className="text-xl font-semibold text-dark-400">Create New Post</h3>
        <input
          type="text"
          placeholder="Post Title"
          value={newPostTitle}
          onChange={(e) => setNewPostTitle(e.target.value)}
          className="w-full bg-dark-200 text-dark-400 px-4 py-2 rounded-lg border border-dark-300/30 focus:ring-2 focus:ring-dark-300 transition-all"
        />
        <textarea
          placeholder="Post Content"
          value={newPostContent}
          onChange={(e) => setNewPostContent(e.target.value)}
          className="w-full bg-dark-200 text-dark-400 px-4 py-2 rounded-lg border border-dark-300/30 focus:ring-2 focus:ring-dark-300 transition-all h-32"
        />
          <div className="flex space-x-4">
            <button 
              onClick={createPost} 
              className="dark-btn dark-btn-primary"
              disabled={!newPostTitle.trim() || !newPostContent.trim()}
            >
              Create Post
            </button>
            <button 
              onClick={() => setShowForm(false)} 
              className="dark-btn dark-btn-secondary"
            >
              Cancel
            </button>
          </div>
        </div>
      )}

      {token ? null : (
        <div className="text-center">
          <button 
            onClick={() => navigate('/login')} 
            className="dark-btn dark-btn-secondary"
          >
            Login to Create Post
          </button>
        </div>
      )}
    </div>
  );
};

export default TopicPage;

================
File: component/User.jsx
================
import React, { useEffect, useState } from 'react';
import api from '../service/apiClient';

const Users = () => {
  const [users, setUsers] = useState([]);

  const fetchUsers = async () => {
    try {
      const response = await api.get('/users'); 
      setUsers(response.data);
    } catch (err) {
      alert('Failed to fetch users');
    }
  };

  const deleteUser = async (userId) => {
    try {
      await api.delete(`/admin/users/${userId}`);
      alert('User deleted successfully');
      setUsers(users.filter(user => user.id !== userId));
    } catch (err) {
      alert('Failed to delete user');
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  return (
    <div>
      <h2>Users</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>
            {user.name} ({user.email})
            <button onClick={() => deleteUser(user.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Users;

================
File: service/apiClient.js
================
import axios from 'axios';


const api = axios.create({
    baseURL: `${'http://localhost:8080'}/api`,
  headers: {
    'Content-Type': 'application/json',
  }
});


api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    
    
    console.log('Making request to:', `${config.baseURL}${config.url}`);
    
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }


    console.log('Request details:', {
      fullUrl: `${config.baseURL}${config.url}`,
      method: config.method?.toUpperCase(),
      headers: config.headers,
      data: config.data
    });

    return config;
  },
  (error) => {
    console.error('Request error:', error);
    return Promise.reject(error);
  }
);


api.interceptors.response.use(
  (response) => {
    console.log('Response received:', {
      url: `${response.config.baseURL}${response.config.url}`,
      status: response.status,
      data: response.data
    });
    return response;
  },
  (error) => {

    const errorInfo = {
      url: `${error.config?.baseURL}${error.config?.url}`,
      method: error.config?.method?.toUpperCase(),
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      message: error.message
    };

   
    if (error.response?.status === 401) {
      console.error('Authentication error:', errorInfo);
    
      localStorage.removeItem('token');
    } else if (!error.response) {
      console.error('Network error - no response from server:', errorInfo);
    } else {
      console.error(`Error ${error.response.status}:`, errorInfo);
    }

    return Promise.reject(error);
  }
);

export default api;

================
File: service/authService.js
================
import api from './apiClient';

export const login = async (email, password) => {
  try {
    const response = await api.post('/auth/login', { email, password });
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const signup = async (userData) => {
  try {
    const response = await api.post('/auth/signup', userData);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const logout = async () => {
  try {
    await api.post('/auth/logout');
  } catch (error) {
    console.error('Logout failed', error);
  }
};

================
File: App.jsx
================
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Home from './component/Home';
import Login from './component/Login';
import Signup from './component/Signup';
import TopicPage from './component/TopicPage';
import PostDetail from './component/PostDetail';
import Navbar from './component/Navbar';

const App = () => {
  // Dark mode state management
  const [darkMode, setDarkMode] = useState(
    localStorage.getItem('darkMode') === 'true' || 
    window.matchMedia('(prefers-color-scheme: dark)').matches
  );

  useEffect(() => {
    document.documentElement.classList.toggle('dark', darkMode);
    localStorage.setItem('darkMode', darkMode.toString());
  }, [darkMode]);

  return (
    <Router>
      <div className={`min-h-screen ${darkMode ? 'dark' : ''}`}>
        <Navbar 
          darkMode={darkMode} 
          toggleDarkMode={() => setDarkMode(!darkMode)} 
        />
        <div className="pt-16 container mx-auto px-4 sm:px-6 lg:px-8"> 
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            <Route path="/signup" element={<Signup />} />
            <Route path="/topics/:topicId" element={<TopicPage />} />
            <Route path="/posts/:postId" element={<PostDetail />} />
          </Routes>
        </div>
      </div>
    </Router>
  );
};

export default App;

================
File: index.css
================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-dark-50 text-dark-400 font-sans;
}

/* Scrollbar styling for dark mode */
::-webkit-scrollbar {
  @apply w-2 bg-dark-100;
}

::-webkit-scrollbar-thumb {
  @apply bg-dark-300 rounded-full;
}

================
File: main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import React from 'react'
import App from './App.jsx'
import './index.css'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
